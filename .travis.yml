language: python

matrix:
    include:
        - python: 2.7
        - python: 3.5
        - python: 3.6
        # TODO: 3.7
        - python: 3.6
          env: SKIP_TESTS=true
        - python: 3.6
          env: SKIP_TESTS=true BUILD_DOCS=true

sudo: false

addons:
    apt:
        packages:
            libfftw3-dev
            texlive-latex-base
            texlive-latex-recommended
            texlive-latex-extra
            dvipng


# Setup numpy + scipy using miniconda
# See http://conda.pydata.org/docs/travis.html
install:
    # Install miniconda according to Python version of the build (saves downloading if versions match)
    - if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
        wget -q https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;
      else
        wget -q https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
      fi
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    # Useful for debugging any issues with conda
    - conda info -a

    # Install dependencies and enter test environment
    - conda create -n testenv
    - source activate testenv
    - conda config --env --add channels conda-forge
    - conda install python=$TRAVIS_PYTHON_VERSION "numpy<1.16.0" nfft cython pytest
    - python -c "import numpy; import sys; print(sys.version); print(numpy.__version__); print(numpy.__path__);"

    # Doc dependencies
    - if [[ "$BUILD_DOCS" == "true" ]]; then
        pip install "sphinx>=1.7" "travis-sphinx>=2.1.2";
      fi

    # Build and install our package
    - CFLAGS="-I$CONDA_PREFIX/include" LDFLAGS="-L$CONDA_PREFIX/lib" pip install -e . -vv

script:
    # Run tests and produce a coverage report.
    # Also invoke the alternative way of running the unit tests.
    # Fail immediately after first failure to speed up the whole thing.
    - if [[ "$SKIP_TESTS" != "true" ]]; then
        pytest --doctest-modules pynfft/ || exit -1;
      fi
    # Build the Sphinx doc (only for one specific build, master branch, no PR)
    # To avoid clogging the logs, we redirect stderr to /dev/null
    - if [[ "$BUILD_DOCS" == "true" ]]; then
        cd doc && make html 2>/dev/null || exit -1;
      fi

after_success:
    # TODO: how to deploy the docs?

